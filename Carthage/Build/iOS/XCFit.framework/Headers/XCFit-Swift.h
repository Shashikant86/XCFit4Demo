// Generated by Apple Swift version 3.1-dev (LLVM 40fb70e1b6, Clang 658ce8b57d, Swift d6c7fe1067)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import XCTest;
@import ObjectiveC;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class XCUIElement;
@class NSInvocation;

SWIFT_CLASS("_TtC5XCFit5XCFit")
@interface XCFit : XCTestCase
- (void)waitUntilElementActiveWithElement:(XCUIElement * _Nonnull)element;
- (BOOL)waitForElementToAppearCommpleted:(XCUIElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (BOOL)waitForElementToAppearTimedOut:(XCUIElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (BOOL)waitForElementToAppearIncorrectOrder:(XCUIElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (BOOL)waitForElementToAppearinvertedFulfillment:(XCUIElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
- (void)elementAppeared:(XCUIElement * _Nonnull)element;
- (nonnull instancetype)initWithInvocation:(NSInvocation * _Nullable)invocation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(SEL _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface XCFit (SWIFT_EXTENSION(XCFit))
- (void)givenILaunchedApplication;
- (void)whenITerminatedApplication;
- (void)givenILaunchedApplicationWithArgumentsWithLaunchArguments:(NSArray<NSArray<NSString *> *> * _Nonnull)launchArguments;
@end


@interface XCFit (SWIFT_EXTENSION(XCFit))
- (void)whenIexpectElementToAppear:(XCUIElement * _Nonnull)element;
- (void)whenIexpectElementTimeOut:(XCUIElement * _Nonnull)element;
- (void)whenIexpectElementIncorrectOrder:(XCUIElement * _Nonnull)element;
- (void)whenIexpectElementInvertedFulfillment:(XCUIElement * _Nonnull)element;
@end


@interface XCFit (SWIFT_EXTENSION(XCFit))
- (void)thenIShouldSee:(XCUIElement * _Nonnull)element;
- (void)thenElemenShouldHavePlaceholderValue:(XCUIElement * _Nonnull)element :(NSString * _Nonnull)value;
- (void)thenElementShouldHaveTitle:(XCUIElement * _Nonnull)element :(NSString * _Nonnull)title;
- (void)thenElementShouldBeEnabled:(XCUIElement * _Nonnull)element;
- (void)thenElementShouldBeVisible:(XCUIElement * _Nonnull)element;
- (void)thenElementShouldBeHittable:(XCUIElement * _Nonnull)element;
- (void)thenElementShouldSelected:(XCUIElement * _Nonnull)element;
- (void)thenIShouldSeeAnAlert;
@end


@interface XCFit (SWIFT_EXTENSION(XCFit))
- (void)whenITapOn:(XCUIElement * _Nonnull)element;
- (void)whenIDoubleTapOn:(XCUIElement * _Nonnull)element;
- (void)whenItypeTextIntoTextFieldWithTextField:(XCUIElement * _Nonnull)textField text:(NSString * _Nonnull)text;
- (void)whenIActOnAlertWithAlertTitle:(NSString * _Nonnull)alertTitle alertButton:(NSString * _Nonnull)alertButton;
- (void)whenIAllowSystemAlertWithAlertDescription:(NSString * _Nonnull)alertDescription;
- (void)whenISlideASliderBy:(CGFloat)normalisedValue;
- (void)whenISelectAItemFromPickerWithItem:(CGFloat)item;
- (void)whenIClickLinkFromWebViewWithLinkText:(NSString * _Nonnull)linkText;
- (void)whenIPressElementForDuration:(XCUIElement * _Nonnull)element duration:(NSTimeInterval)duration;
- (void)whenIPressOnElementAndDragToOtherElement:(XCUIElement * _Nonnull)element destinationElement:(XCUIElement * _Nonnull)destinationElement duration:(NSTimeInterval)duration;
- (void)whenIClickElementForDuration:(XCUIElement * _Nonnull)element duration:(NSTimeInterval)duration;
- (void)whenIClickOnElementAndDragToOtherElement:(XCUIElement * _Nonnull)element destinationElement:(XCUIElement * _Nonnull)destinationElement duration:(NSTimeInterval)duration;
@end


SWIFT_CLASS("_TtC5XCFit11XCFitWaiter")
@interface XCFitWaiter : XCFit
- (void)waitUntilElementExistWithElement:(XCUIElement * _Nonnull)element;
- (nonnull instancetype)initWithInvocation:(NSInvocation * _Nullable)invocation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSelector:(SEL _Nonnull)selector OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface XCTestCase (SWIFT_EXTENSION(XCFit))
- (void)waitForElementToAppearOnScreenWithElement:(XCUIElement * _Nonnull)element file:(NSString * _Nonnull)file line:(NSUInteger)line SWIFT_AVAILABILITY(macos,introduced=10.11);
@end


@interface XCTestCase (SWIFT_EXTENSION(XCFit))
- (void)waitForHittableWithElement:(XCUIElement * _Nonnull)element waitSeconds:(double)waitSeconds file:(NSString * _Nonnull)file line:(NSUInteger)line SWIFT_AVAILABILITY(macos,introduced=10.11);
- (void)waitForNotHittableWithElement:(XCUIElement * _Nonnull)element waitSeconds:(double)waitSeconds file:(NSString * _Nonnull)file line:(NSUInteger)line SWIFT_AVAILABILITY(macos,introduced=10.11);
- (void)waitForExistsWithElement:(XCUIElement * _Nonnull)element waitSeconds:(double)waitSeconds file:(NSString * _Nonnull)file line:(NSUInteger)line SWIFT_AVAILABILITY(macos,introduced=10.11);
@end


@interface XCTestCase (SWIFT_EXTENSION(XCFit))
/// Waits for the default timeout until <code>element.exists</code> is true.
/// @param element the element you are waiting for
/// @see waitForElementToNotExist()
- (void)waitForElementToExistWithElement:(XCUIElement * _Nonnull)element SWIFT_AVAILABILITY(macos,introduced=10.11);
/// Waits for the default timeout until <code>element.exists</code> is false.
/// @param element the element you are waiting for
/// @see waitForElementToExist()
- (void)waitForElementToNotExistWithElement:(XCUIElement * _Nonnull)element SWIFT_AVAILABILITY(macos,introduced=10.11);
/// Waits for the default timeout until the activity indicator stop spinning.
/// @note Should only be used if one <code>ActivityIndicator</code> is present.
- (void)waitForActivityIndicatorToFinish;
@end


@interface XCUIElement (SWIFT_EXTENSION(XCFit))
@property (nonatomic, readonly) BOOL isVisible;
@end


@interface XCUIElement (SWIFT_EXTENSION(XCFit))
- (void)waitAndTapWithTestCase:(XCTestCase * _Nonnull)testCase file:(NSString * _Nonnull)file line:(NSUInteger)line;
- (void)waitForAppearanceWithTestCase:(XCTestCase * _Nonnull)testCase file:(NSString * _Nonnull)file line:(NSUInteger)line;
- (void)waitForDisappearanceWithTestCase:(XCTestCase * _Nonnull)testCase file:(NSString * _Nonnull)file line:(NSUInteger)line;
@end

#pragma clang diagnostic pop
